{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate,useParams}from'react-router-dom';import{useAppContext}from'../App';import{QUESTIONS}from'./questionsData';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const QuestionPage=()=>{var _QUESTIONS$state$role;const navigate=useNavigate();const{questionNum}=useParams();const{state,updateState}=useAppContext();const[name,setName]=useState('');const currentQuestionIndex=parseInt(questionNum)-1;const currentQuestion=(_QUESTIONS$state$role=QUESTIONS[state.role])===null||_QUESTIONS$state$role===void 0?void 0:_QUESTIONS$state$role[currentQuestionIndex];useEffect(()=>{// Redirect if no role is selected\nif(!state.role){navigate('/');return;}// Redirect if question number is invalid\nif(!currentQuestion){navigate('/');return;}},[state.role,currentQuestion,navigate]);const handleNameSubmit=e=>{e.preventDefault();if(name.trim()){updateState({name:name.trim()});}};const handleOptionSelect=score=>{const newScores=[...state.scores];newScores[currentQuestionIndex]=score;updateState({scores:newScores});// Navigate to next question or result page\nif(parseInt(questionNum)<5){navigate(`/${state.role}/${parseInt(questionNum)+1}`);}else{// All questions completed, submit data\nsubmitData(newScores);}};const submitData=async finalScores=>{try{const userData={id:`${state.role}_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,name:state.name,scores:finalScores,timestamp:new Date().toISOString()};const response=await fetch(`/${state.role}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});const result=await response.json();if(response.ok){updateState({result});navigate('/result');}else{console.error('Error:',result.error);alert('Error submitting data. Please try again.');}}catch(error){console.error('Network error:',error);alert('Network error. Please check your connection and try again.');}};if(!state.role||!currentQuestion){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}// Show name input for first question if name is not set\nif(parseInt(questionNum)===1&&!state.name){return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"card\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"question-container\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"question-title\",children:\"Welcome! What's your name?\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleNameSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:name,onChange:e=>setName(e.target.value),placeholder:\"Enter your full name\",style:{width:'100%',padding:'16px',fontSize:'16px',border:'2px solid #e0e0e0',borderRadius:'8px',marginBottom:'1rem'},required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-large\",children:\"Continue\"})]})]})})});}const progress=parseInt(questionNum)/5*100;return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:`${progress}%`}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"question-container\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"question-title\",children:[\"Question \",questionNum,\" of 5\"]}),/*#__PURE__*/_jsx(\"h3\",{style:{color:'#555',marginBottom:'2rem'},children:currentQuestion.question}),/*#__PURE__*/_jsx(\"div\",{className:\"options-container\",children:currentQuestion.options.map((option,index)=>/*#__PURE__*/_jsx(\"button\",{className:\"option-btn\",onClick:()=>handleOptionSelect(option.score),children:option.text},index))}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'2rem',color:'#888'},children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Hello \",state.name,\"! Choose the option that best describes you.\"]})})]})]})});};export default QuestionPage;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","useAppContext","QUESTIONS","jsx","_jsx","jsxs","_jsxs","QuestionPage","_QUESTIONS$state$role","navigate","questionNum","state","updateState","name","setName","currentQuestionIndex","parseInt","currentQuestion","role","handleNameSubmit","e","preventDefault","trim","handleOptionSelect","score","newScores","scores","submitData","finalScores","userData","id","Date","now","Math","random","toString","substr","timestamp","toISOString","response","fetch","method","headers","body","JSON","stringify","result","json","ok","console","error","alert","children","className","onSubmit","type","value","onChange","target","placeholder","style","width","padding","fontSize","border","borderRadius","marginBottom","required","progress","color","question","options","map","option","index","onClick","text","marginTop"],"sources":["/workspaces/mentor-mentee-mapping/frontend/src/components/QuestionPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useAppContext } from '../App';\nimport { QUESTIONS } from './questionsData';\n\nconst QuestionPage = () => {\n  const navigate = useNavigate();\n  const { questionNum } = useParams();\n  const { state, updateState } = useAppContext();\n  const [name, setName] = useState('');\n  \n  const currentQuestionIndex = parseInt(questionNum) - 1;\n  const currentQuestion = QUESTIONS[state.role]?.[currentQuestionIndex];\n  \n  useEffect(() => {\n    // Redirect if no role is selected\n    if (!state.role) {\n      navigate('/');\n      return;\n    }\n    \n    // Redirect if question number is invalid\n    if (!currentQuestion) {\n      navigate('/');\n      return;\n    }\n  }, [state.role, currentQuestion, navigate]);\n\n  const handleNameSubmit = (e) => {\n    e.preventDefault();\n    if (name.trim()) {\n      updateState({ name: name.trim() });\n    }\n  };\n\n  const handleOptionSelect = (score) => {\n    const newScores = [...state.scores];\n    newScores[currentQuestionIndex] = score;\n    updateState({ scores: newScores });\n    \n    // Navigate to next question or result page\n    if (parseInt(questionNum) < 5) {\n      navigate(`/${state.role}/${parseInt(questionNum) + 1}`);\n    } else {\n      // All questions completed, submit data\n      submitData(newScores);\n    }\n  };\n\n  const submitData = async (finalScores) => {\n    try {\n      const userData = {\n        id: `${state.role}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        name: state.name,\n        scores: finalScores,\n        timestamp: new Date().toISOString()\n      };\n\n      const response = await fetch(`/${state.role}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData)\n      });\n\n      const result = await response.json();\n      \n      if (response.ok) {\n        updateState({ result });\n        navigate('/result');\n      } else {\n        console.error('Error:', result.error);\n        alert('Error submitting data. Please try again.');\n      }\n    } catch (error) {\n      console.error('Network error:', error);\n      alert('Network error. Please check your connection and try again.');\n    }\n  };\n\n  if (!state.role || !currentQuestion) {\n    return <div>Loading...</div>;\n  }\n\n  // Show name input for first question if name is not set\n  if (parseInt(questionNum) === 1 && !state.name) {\n    return (\n      <div className=\"container\">\n        <div className=\"card\">\n          <div className=\"question-container\">\n            <h2 className=\"question-title\">\n              Welcome! What's your name?\n            </h2>\n            <form onSubmit={handleNameSubmit}>\n              <input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"Enter your full name\"\n                style={{\n                  width: '100%',\n                  padding: '16px',\n                  fontSize: '16px',\n                  border: '2px solid #e0e0e0',\n                  borderRadius: '8px',\n                  marginBottom: '1rem'\n                }}\n                required\n              />\n              <button type=\"submit\" className=\"btn btn-large\">\n                Continue\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const progress = (parseInt(questionNum) / 5) * 100;\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <div className=\"progress-bar\">\n          <div \n            className=\"progress-fill\" \n            style={{ width: `${progress}%` }}\n          ></div>\n        </div>\n        \n        <div className=\"question-container\">\n          <h2 className=\"question-title\">\n            Question {questionNum} of 5\n          </h2>\n          <h3 style={{ color: '#555', marginBottom: '2rem' }}>\n            {currentQuestion.question}\n          </h3>\n          \n          <div className=\"options-container\">\n            {currentQuestion.options.map((option, index) => (\n              <button\n                key={index}\n                className=\"option-btn\"\n                onClick={() => handleOptionSelect(option.score)}\n              >\n                {option.text}\n              </button>\n            ))}\n          </div>\n          \n          <div style={{ marginTop: '2rem', color: '#888' }}>\n            <small>Hello {state.name}! Choose the option that best describes you.</small>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}